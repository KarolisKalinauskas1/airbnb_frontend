<template>
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4">
    <div class="max-w-md w-full bg-white p-8 rounded-xl shadow-md text-center">
      <div class="flex justify-center">
        <div v-if="loading" class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-red-600"></div>
        <div v-else-if="success" class="text-green-500 mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        </div>
        <div v-else class="text-red-500 mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </div>
      </div>

      <h2 class="mt-6 text-center text-2xl font-extrabold text-gray-900">
        {{ pageTitle }}
      </h2>
      
      <p class="mt-2 text-center text-sm text-gray-600">
        {{ statusMessage }}
      </p>
      
      <div class="mt-6">
        <button 
          @click="navigateToHome" 
          class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Continue to Camping App
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useRouter, useRoute } from 'vue-router';
import { useAuthStore } from '@/stores/auth';
import { supabase } from '@/lib/supabase';
import axios from '@/axios';

const router = useRouter();
const route = useRoute();
const authStore = useAuthStore();

const loading = ref(true);
const success = ref(false);
const pageTitle = ref('Processing your login...');
const statusMessage = ref('Please wait while we set up your account.');

const navigateToHome = () => {
  router.push('/');
};

onMounted(async () => {
  try {
    console.log('Starting social auth processing with Supabase...');
    
    // Get the session from Supabase which should have been updated after OAuth redirect
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Error retrieving Supabase session:', error);
      throw error;
    }
    
    const session = data?.session;
    
    if (!session) {
      console.error('No session found after Supabase OAuth flow');
      throw new Error('No session found. Authentication failed.');
    }
    
    console.log('Successfully retrieved Supabase session for:', session.user.email);
    
    // Use the user data from Supabase session
    const { user } = session;
    
    console.log('User authenticated with Supabase:', user.email);
    
    // Now sync this with our backend for our own JWT and user record
    try {
      console.log('Synchronizing with backend API');
      
      const backendResponse = await axios.post('/api/auth/oauth/google/supabase-callback', {
        supabase_id: user.id,
        email: user.email,
        full_name: user.user_metadata?.full_name || user.user_metadata?.name,
        avatar_url: user.user_metadata?.avatar_url
      });
      
      const backendData = backendResponse.data;
      console.log('Backend sync successful');
      
      // Store our own JWT for API access
      localStorage.setItem('token', backendData.token);
      localStorage.setItem('user_id', backendData.user.user_id);
      localStorage.setItem('user_email', user.email);
      
      // Initialize auth store with the new token
      await authStore.initAuth({ forceRefresh: true });
      
      if (authStore.isLoggedIn) {
        success.value = true;
        pageTitle.value = 'Login Successful!';
        statusMessage.value = 'You have been successfully logged in with Google.';
      } else {
        throw new Error('Failed to initialize session');
      }
    } catch (backendError) {
      console.error('Backend synchronization error:', backendError);
      throw new Error(`Backend sync failed: ${backendError.message}`);
    }
  } catch (error) {
    console.error('Social auth error:', error);
    success.value = false;
    pageTitle.value = 'Authentication Failed';
    statusMessage.value = `We encountered an issue while signing you in: ${error.message}. Please try again.`;
  } finally {
    loading.value = false;
  }
});
</script>
