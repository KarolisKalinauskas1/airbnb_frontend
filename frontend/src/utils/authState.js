/** * Auth State Utility *  * Provides functions to check and fix authentication state issues */import { supabase } from '@/lib/supabase';import axios from '@/axios';import { useAuthStore } from '@/stores/auth';/** * Check if session token is valid and not expired * @param {Object} session - Supabase session object  * @returns {boolean} - True if session is valid */export function isSessionValid(session) {  if (!session || !session.expires_at) return false;  const expiresAt = new Date(session.expires_at * 1000);  const now = new Date();  return expiresAt > now;}/** * Check if token needs to be refreshed soon * @param {Object} session - Supabase session object * @returns {boolean} - True if token should be refreshed */export function shouldRefreshToken(session) {  if (!session || !session.expires_at) return false;  const expiresAt = new Date(session.expires_at * 1000);  const now = new Date();  // If token expires in less than 5 minutes, refresh it  const expiresInMinutes = (expiresAt - now) / (1000 * 60);  return expiresInMinutes < 5;}/** * Refresh the authentication token * @returns {Promise<string|null>} The refreshed token or null */export async function refreshToken() {  try {    const { data, error } = await supabase.auth.refreshSession();    if (error) {      console.error('Token refresh error:', error.message);      return null;    }    if (data.session) {      localStorage.setItem('token', data.session.access_token);      return data.session.access_token;    }    return null;  } catch (err) {    console.error('Token refresh exception:', err);    return null;  }}/** * Clean up auth state and fix inconsistencies */export async function fixAuthState() {  try {    // Get current Supabase session    const { data: { session } } = await supabase.auth.getSession();    const authStore = useAuthStore();    // Case 1: No Supabase session, but app thinks we're logged in    if (!session && authStore.isLoggedIn) {      authStore.resetAuth();      return true;    }    // Case 2: Session exists but app doesn't know    if (session && !authStore.isLoggedIn) {      // Update auth store      authStore.token = session.access_token;      authStore.user = session.user;      // Try to fetch user data      try {        const response = await axios.get('/api/users/full-info', {          headers: {            Authorization: `Bearer ${session.access_token}`          }        });        authStore.setFullUserData(response.data);        return true;      } catch (error) {        console.error('Error fetching user data:', error);        return false;      }    }    // Case 3: Session exists and app is logged in but token mismatch    if (session && authStore.isLoggedIn && authStore.token !== session.access_token) {      authStore.token = session.access_token;      return true;    }    // Refresh token if needed    if (shouldRefreshToken(session)) {      const newToken = await refreshToken();      if (!newToken) {        localStorage.removeItem('token');        localStorage.removeItem('userData');        return false;      }    }    // Try to fetch user data    try {      const response = await axios.get('/api/users/full-info', {        headers: {          Authorization: `Bearer ${session.access_token}`        }      });      // Update localStorage      localStorage.setItem('userData', JSON.stringify(response.data));      localStorage.setItem('last_user_fetch_time', Date.now().toString());      return true;    } catch (apiError) {      try {        const fallbackResponse = await axios.get('/users/full-info', {          headers: {            Authorization: `Bearer ${session.access_token}`          }        });        // Update localStorage        localStorage.setItem('userData', JSON.stringify(fallbackResponse.data));        localStorage.setItem('last_user_fetch_time', Date.now().toString());        return true;      } catch (fallbackError) {        console.error('All user data fetch attempts failed');        return false;      }    }  } catch (err) {    console.error('Fix auth state error:', err);    return false;  }}export default {  isSessionValid,  shouldRefreshToken,  refreshToken,  fixAuthState};